main: 

    tareas las leo del archivo de tareas.txt
    ganancias las leo del archivo ganancias.txt

    estadoTareas = itero las tareas y por cada una agrego un elemento con valor falso a una lista vacia
    mejoresGananciasPorSemana = calcularMejoresGananciasPorSemana()

    gananciaMaxima = 0
    ordenTareasGananciaMaxima = []

    calcularMaximaGanancia(0, 0, [])

//============== FUNCIÓN PRINCIPAL ==============//

// funcion backtracking
func calcularMaximaGanancia(nroSemana, gananciaPrevia, ordenTareasRealizadas):
           
    // estadosDescendientes
    tareasNoRealizadas = obtenerTareasNoRealizadas()
    
    // descendientes
    tareasNoRealizadasAExplorar = []
    por cada idTarea de tareasNoRealizadas:
        // propiedad de corte
        if todasTareasPreviasRealizadas(idTarea):
            // funcion costo
            gananciaEstimada = calcularMaximaGananciaPosible(nroSemana, idTarea, gananciaPrevia)
            agrego a idTarea y gananciaEstimada a tareasNoRealizadasAExplorar
    
    cantidadTareasExploradas = 0
    // mientras existan estados descendientes no explorados
    mientras la cantidadTareasExploradas sea menor al tamaño de tareasNoRealizadasAExplorar
        
        // estadoProximo con mayor fc
        idxDescendiente = buscarIdxTareaNoRealizadaConMayorFc(tareasNoRealizadasAExplorar)
        aumento el contador de cantidadTareasExploradas
        gananciaEstimada = ganancia estimada que saco de tareasNoRealizadasAExplorar con indice idxDescendiente
        
        // marco al descendiente como visitado
        marco como explorada a la tarea que esta en idxDescendiente de tareasNoRealizadasAExplorar
        
        marco tarea con idTarea como realizada en estadoTareas
        agrego tarea con idTarea en ordenTareasRealizadas
        
        // si fc es de estadoProximo es mayor a la mejor solucion obtenida
        si la gananciaMaxima es mayor a la gananciaEstimada:
            // si es solucion
            si el ordenTareasRealizadas tiene el mismo tamaño que tareas y la gananciaMaxima es mayor a la gananciaEstimada:
                gananciaMaxima = gananciaEstimada
                ordenTareasGananciaMaxima = ordenTareasRealizadas
            
            gananciaTarea = calcularGananciaTarea(nroSemana, idTarea)
            calcularMaximaGanancia(nroSemana + 1, gananciaPrevia + gananciaTarea, ordenTareasRealizadas)
            
        marco tarea con idTarea como no realizada en estadoTareas
        quito tarea con idTarea en ordenTareasRealizadas

func calcularMejoresGananciasPorSemana: 
    
    // me salteo el id del la tarea
    desde i = 1 hasta tamaño ganancias + 1
        gananciaMaxima = 0
        desde j = 0 hasta el tamaño de ganancias
            si gananciaMaxima < ganancias[j][i]:
                gananciaMaxima = ganancias[j][i]
        agrego a mejoresGananciasPorSemana el valor gananciaMaxima


//============== ESTADOS DESCENDIENTES ==============// 

func obtenerTareasNoRealizadas:
    
    tareasNoRealizadas = []
    
    por cada tarea de tareas
        idTarea = extraigo el id de tarea
        if not estadoTareas[idTarea - 1]:
            agrego a tareasNoRealizadas el idTarea 
    
    retorno tareasNoRealizadas


//============== PROPIEDAD CORTE ==============// 

func todasTareasPreviasRealizadas(idTarea):
    
    tareasPrevias = extrigo las tareas previas de la tarea con idTarea de tareas
    
    si no tiene tareasPrevias:
        retorno verdadero
        
    por cada tarea de las tareasPrevias:
        si la tarea no fue realizada:
            retorno falso

    retorno verdadero


//============== FUNCION COSTO ==============// 

func calcularMaximaGananciaPosible(nroSemana, idTarea, gananciaPrevia):
    
    gananciaActual = gananciaPrevia
    gananciaActual += calcularGananciaTarea(nroSemana, idTarea)
    gananciaProyectada = calcularProyeccionMaximaGananciaPosible(nroSemana)
    
    retorno gananciaActual + gananciaProyectada


func calcularGananciaTarea(nroSemana, idTarea):
    
    retorno ganancias[idTarea - 1][nroSemana + 1]


func calcularProyeccionMaximaGananciaPosible(nroSemana):
        
    gananciaOptima = 0

    desde i = nroSemana+1 hasta el tamaño de mejoresGananciasPorSemana:
        gananciaOptima += mejoresGananciasPorSemana[i]
        
    retorno gananciaOptima


//============== ESTADO PROXIMO ==============// 

func buscarIdxTareaNoRealizadaConMayorFc(tareasNoRealizadasAExplorar):
    idxMaxFc = -1
    maxFc = 0
    
    por cada tarea de tareasNoRealizadasAExplorar:
        si la tarea fue explorada:
            salto a proxima iteracion
        si la tarea no fue visitada y maxFc < fc:
            idxMaxFc = i
    
    retorno idxMaxFc